[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "expense-tracker"
version = "1.0.0"
description = "Personal expense tracking and categorization system with FastAPI"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Julio", email = "julio@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Framework :: FastAPI",
    "Topic :: Office/Business :: Financial",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "sqlalchemy==2.0.23",
    "psycopg2-binary==2.9.9",
    "alembic==1.12.1",
    "pydantic==2.5.0",
    "python-multipart==0.0.6",
    "fuzzywuzzy==0.18.0",
    "python-levenshtein==0.23.0",
    "python-dotenv==1.0.0",
    "pytest==7.4.3",
    "httpx==0.25.2",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.8",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.1",
    "pre-commit>=3.5.0",
]

[project.urls]
Homepage = "https://github.com/your-username/expense-tracker"
Repository = "https://github.com/your-username/expense-tracker.git"
Issues = "https://github.com/your-username/expense-tracker/issues"

[project.scripts]
expense-tracker = "app.main:app"

# Ruff Configuration
[tool.ruff]
target-version = "py311"
line-length = 88
indent-width = 4

# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "myenv",
    ".dockerignore",
    "Dockerfile*",
    "docker-compose*",
]

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default
# Plus additional useful rules
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TC", # flake8-type-checking (updated from TCH)
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # Pylint
    "RUF", # Ruff-specific rules
]

ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "PLR0911", # Too many return statements
    "ARG002",  # Unused method argument
    "TC002",  # Move third-party import into TYPE_CHECKING block
    "TC003",  # Move standard library import into TYPE_CHECKING block
    "PLC0415", # Import should be at top-level (allow for avoiding circular imports)
]

# Allow fix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings
quote-style = "double"

# Like Black, indent with spaces, rather than tabs
indent-style = "space"

# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"**/test_*.py" = [
    "PLR2004",  # Magic value used in comparison
    "S101",     # Use of assert
    "ARG",      # Unused function args -> fixtures nevertheless are functionally relevant
    "FBT",      # Don't care about booleans as positional arguments in tests
    "PLR0913",  # Too many arguments to function call
    "PLR0915",  # Too many statements
    "S311",     # Standard pseudo-random generators are not suitable for security/cryptographic purposes
]

# Allow print statements in scripts
"scripts/*.py" = ["T201"]

# Ignore complexity in main.py
"app/main.py" = ["PLR0913"]

# Allow star imports in __init__.py files
"__init__.py" = ["F401", "F403"]

# Allow late imports in start.py for path manipulation
"start.py" = ["E402"]

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 50

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["app/tests", "tests"]
pythonpath = ["app"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage Configuration
[tool.coverage.run]
source = ["app"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/myenv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# MyPy Configuration (optional)
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "fuzzywuzzy.*",
    "Levenshtein.*",
    "pytest.*",
]
ignore_missing_imports = true 